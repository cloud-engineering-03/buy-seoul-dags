from sqlalchemy import create_engine, text
import pandas as pd
import os

def insert_init_data():
    # DB 연결 설정
    db_url = "postgresql+psycopg2://test:test@postgres-postgresql.postgres.svc.cluster.local:5432/testdb"
    engine = create_engine(db_url)

    # 1. CREATE TABLE 쿼리 실행
        
    with engine.begin() as conn:

        conn.execute(text("""
            CREATE TABLE "province" (
            "province_code" char(2) PRIMARY KEY,
            "province_name" varchar(50)
            );

            CREATE TABLE "district" (
            "district_code" char(5) PRIMARY KEY,
            "district_name" varchar(20),
            "province_code" char(2)
            );

            CREATE TABLE "station" (
            "station_id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            "station_name" varchar(50),
            "station_name_eng" varchar(50),
            "latitude" double,
            "longitude" double,
            "district_code" char(5)
            );

            CREATE TABLE "station_line_map" (
            "station_id" integer,
            "line_number" varchar(10),
            "Primary" Key(station_id,line_number)
            );

            CREATE TABLE "nearby_district" (
            "base_district_code" char(5),
            "adjacent_district_code" char(5),
            "distance" double,
            "Primary" Key(base_district_code,adjacent_district_code)
            );

            CREATE TABLE "real_estate_transaction" (
            "id" INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
            "district_code" char(5),
            "legal_dong_code" char(10),
            "contract_date" date,
            "cancellation_date" date,
            "lot_type" int,
            "lot_type_name" varchar(10),
            "main_lot_number" varchar(4),
            "sub_lot_number" varchar(4),
            "building_name" varchar(100),
            "floor" int,
            "building_area" double,
            "land_area" double,
            "transaction_amount" double,
            "building_usage" varchar(100),
            "construction_year" int,
            "report_type" varchar(10),
            "ownership_type" varchar(10),
            "report_year" int,
            "agent_office_district_name" varchar(40)
            );

            CREATE TABLE "station_connection" (
            "from_station_id" int,
            "to_station_id" int,
            "time_minutes" int,
            "transfer" boolean,
            "line_number" varchar(10),
            "Primary" Key(from_station_id,to_station_id,line_number)
            );

            COMMENT ON COLUMN "province"."province_code" IS '시도 코드 (2자리)';

            COMMENT ON COLUMN "province"."province_name" IS '시도명 (예: 서울특별시, 경기도 등)';

            COMMENT ON TABLE "district" IS '자치구는 시/도의 하위 행정구역입니다.';

            COMMENT ON COLUMN "district"."district_code" IS '자치구 코드 (5자리, 앞 2자리는 시도코드)';

            COMMENT ON COLUMN "district"."district_name" IS '자치구 이름 (예: 강남구, 송파구 등)';

            COMMENT ON COLUMN "district"."province_code" IS '상위 시도 코드 (province 테이블 참조)';

            COMMENT ON TABLE "station" IS '지하철역 좌표와 행정구역을 함께 저장합니다.';

            COMMENT ON COLUMN "station"."station_id" IS '지하철역 고유 ID';

            COMMENT ON COLUMN "station"."station_name" IS '지하철역 이름 (한글)';

            COMMENT ON COLUMN "station"."station_name_eng" IS '지하철역 이름 (영문)';

            COMMENT ON COLUMN "station"."latitude" IS '위도';

            COMMENT ON COLUMN "station"."longitude" IS '경도';

            COMMENT ON COLUMN "station"."district_code" IS '지하철역이 속한 자치구 코드';

            COMMENT ON TABLE "station_line_map" IS '역과 노선 간의 다대다 관계를 표현합니다.';

            COMMENT ON COLUMN "station_line_map"."station_id" IS '참조하는 지하철역 ID';

            COMMENT ON COLUMN "station_line_map"."line_number" IS '지하철 노선 번호 (예: 2호선, 9호선 등)';

            COMMENT ON TABLE "nearby_district" IS '자치구 간의 인접성과 거리를 나타냅니다.';

            COMMENT ON COLUMN "nearby_district"."base_district_code" IS '기준 자치구 코드';

            COMMENT ON COLUMN "nearby_district"."adjacent_district_code" IS '인접한 자치구 코드';

            COMMENT ON COLUMN "nearby_district"."distance" IS '두 자치구 중심 간 거리 (단위: km)';

            COMMENT ON TABLE "real_estate_transaction" IS '실거래가 공개 시스템 기반의 부동산 거래 데이터입니다.';

            COMMENT ON COLUMN "real_estate_transaction"."id" IS '부동산 거래 고유 ID';

            COMMENT ON COLUMN "real_estate_transaction"."district_code" IS '해당 거래가 발생한 자치구 코드';

            COMMENT ON COLUMN "real_estate_transaction"."legal_dong_code" IS '법정동 코드';

            COMMENT ON COLUMN "real_estate_transaction"."contract_date" IS '계약 체결일';

            COMMENT ON COLUMN "real_estate_transaction"."cancellation_date" IS '계약 취소일 (취소 시에만 존재)';

            COMMENT ON COLUMN "real_estate_transaction"."lot_type" IS '지번 구분 코드';

            COMMENT ON COLUMN "real_estate_transaction"."lot_type_name" IS '지번 구분 이름 (예: 본번, 부번 등)';

            COMMENT ON COLUMN "real_estate_transaction"."main_lot_number" IS '본번';

            COMMENT ON COLUMN "real_estate_transaction"."sub_lot_number" IS '부번';

            COMMENT ON COLUMN "real_estate_transaction"."building_name" IS '건물 이름 또는 단지명';

            COMMENT ON COLUMN "real_estate_transaction"."floor" IS '해당 층 정보';

            COMMENT ON COLUMN "real_estate_transaction"."building_area" IS '건물 연면적 (㎡)';

            COMMENT ON COLUMN "real_estate_transaction"."land_area" IS '토지 면적 (㎡)';

            COMMENT ON COLUMN "real_estate_transaction"."transaction_amount" IS '실거래가 (만원 단위)';

            COMMENT ON COLUMN "real_estate_transaction"."building_usage" IS '건물 용도 (예: 공동주택, 오피스텔 등)';

            COMMENT ON COLUMN "real_estate_transaction"."construction_year" IS '건축년도';

            COMMENT ON COLUMN "real_estate_transaction"."report_type" IS '신고 구분 (정상, 변경 등)';

            COMMENT ON COLUMN "real_estate_transaction"."ownership_type" IS '권리 구분 (소유권, 임차권 등)';

            COMMENT ON COLUMN "real_estate_transaction"."report_year" IS '신고 연도';

            COMMENT ON COLUMN "real_estate_transaction"."agent_office_district_name" IS '신고한 개업 공인중개사의 시군구명';

            COMMENT ON COLUMN "station_connection"."transfer" IS '환승 여부';

            ALTER TABLE "district" ADD FOREIGN KEY ("province_code") REFERENCES "province" ("province_code");

            ALTER TABLE "station" ADD FOREIGN KEY ("district_code") REFERENCES "district" ("district_code");

            ALTER TABLE "station_line_map" ADD FOREIGN KEY ("station_id") REFERENCES "station" ("station_id");

            ALTER TABLE "nearby_district" ADD FOREIGN KEY ("base_district_code") REFERENCES "district" ("district_code");

            ALTER TABLE "nearby_district" ADD FOREIGN KEY ("adjacent_district_code") REFERENCES "district" ("district_code");

            ALTER TABLE "real_estate_transaction" ADD FOREIGN KEY ("district_code") REFERENCES "district" ("district_code");

            ALTER TABLE "station_connection" ADD FOREIGN KEY ("from_station_id") REFERENCES "station" ("station_id");

            ALTER TABLE "station_connection" ADD FOREIGN KEY ("to_station_id") REFERENCES "station" ("station_id");
        """))
        
        # conn.execute(text("""
        #     DROP TABLE IF EXISTS public.DISTRICT CASCADE;
        #     CREATE TABLE public.DISTRICT (
        #         district_code CHAR(5) PRIMARY KEY,
        #         district_name VARCHAR(20),
        #         province_code CHAR(2),
        #         FOREIGN KEY (province_code) REFERENCES PROVINCE(province_code)
        #     );
        # """))

        # conn.execute(text("""
        #     DROP TABLE IF EXISTS public.NEARBY_DISTRICT CASCADE;
        #     CREATE TABLE public.NEARBY_DISTRICT (
        #         base_district_code CHAR(5),
        #         adjacent_district_code CHAR(5),
        #         distance DOUBLE PRECISION,
        #         FOREIGN KEY (base_district_code) REFERENCES DISTRICT(district_code),
        #         FOREIGN KEY (adjacent_district_code) REFERENCES DISTRICT(district_code),
        #         PRIMARY KEY (base_district_code, adjacent_district_code)
        #     );
        # """))
        
        # conn.execute(text("""
        #     DROP TABLE IF EXISTS public.STATION CASCADE;
        #     CREATE TABLE public.STATION (
        #         station_id int4 GENERATED ALWAYS AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE) NOT NULL,
        #         district_code CHAR(5),
        #         station_name VARCHAR(50),
        #         station_name_eng VARCHAR(50),
        #         latitude DOUBLE PRECISION,
        #         longitude DOUBLE PRECISION,
        #         FOREIGN KEY (district_code) REFERENCES DISTRICT(district_code)
        #     );
        # """))


        # conn.execute(text("""
        #     CREATE TABLE IF NOT EXISTS public.REAL_ESTATE_TRANSACTION  (
        #     id int4 GENERATED ALWAYS AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE) NOT NULL,
        #     district_code char(5) NULL,
        #     legal_dong_code varchar(10) NULL,
        #     contract_date date NULL,
        #     cancellation_date date NULL,
        #     lot_type int4 NULL,
        #     lot_type_name varchar(10) NULL,
        #     main_lot_number varchar(4) NULL,
        #     sub_lot_number varchar(4) NULL,
        #     building_name varchar(100) NULL,
        #     floor int4 NULL,
        #     building_area DOUBLE PRECISION NULL,
        #     land_area DOUBLE PRECISION NULL,
        #     transaction_amount DOUBLE PRECISION NULL,
        #     building_usage varchar(100) NULL,
        #     construction_year int4 NULL,
        #     report_type varchar(10) NULL,
        #     ownership_type varchar(10) NULL,
        #     report_year int4 NULL,
        #     agent_office_district_name varchar(40) NULL,
        #     CONSTRAINT ESTATE_DATA_pkey PRIMARY KEY (id),
        #     FOREIGN KEY (district_code) REFERENCES DISTRICT(district_code)
        #     );
        # """))
        
        
        # conn.execute(text("""
        #     DROP TABLE IF EXISTS public.STATION_LINE_MAP CASCADE;
        #     CREATE TABLE public.STATION_LINE_MAP (
        #         station_id integer NOT NULL,
        #         line_number VARCHAR(10),
        #         PRIMARY KEY (station_id,line_number),
        #         FOREIGN KEY (station_id) REFERENCES STATION(station_id)
        #     );
        # """))

    # 2. JSON 로드 및 INSERT
    curdir = os.path.dirname(os.path.abspath(__file__))
    # current_dir = os.path.dirname(os.path.abspath(__file__))
    
    # gu_df = pd.read_json(curdir"/자치구코드_군구명_매핑.json")
    gu_df = pd.read_json(os.path.join(curdir,"자치구코드_군구명_매핑_서울경기인천.json"))

    sido_df = pd.read_json(os.path.join(curdir,"sido_code.json"))
    dist_df = pd.read_json(os.path.join(curdir,"인접자치구_거리.json"))
    dist_df["기준자치구코드"] = dist_df["기준자치구코드"].astype(str).str.zfill(5)
    dist_df["인접자치구코드"] = dist_df["인접자치구코드"].astype(str).str.zfill(5)
    cgg_station_map_df = pd.read_csv(os.path.join(curdir,"서울지하철_역위치_영문명_자치구매핑완료.csv"))
    subway_line_df = pd.read_csv(os.path.join(curdir,"서울지하철_역호선_매핑테이블.csv"))

    
    with engine.begin() as conn:
        
        for _, row in gu_df.iterrows():
            
            conn.execute(
                text("INSERT INTO DISTRICT (district_code, district_name) VALUES (:code, :name)"),
                {"code": row["자치구코드"], "name": row["군구명"]}
            )
        for _, row in sido_df.iterrows():
            row["시도코드"] = str(int(row["시도코드"])).zfill(2)
            conn.execute(
                text("INSERT INTO PROVINCE (province_code, province_name) VALUES (:sido_code, :sido_name)"),
                {"sido_code": row["시도코드"], "sido_name": row["시도명"]}
            )

        print(len(dist_df))
        for _, row in dist_df.iterrows():
            conn.execute(
                text("INSERT INTO NEARBY_DISTRICT (base_district_code, adjacent_district_code, distance) VALUES (:from_, :to_, :dist)"),
                {"from_": row["기준자치구코드"], "to_": row["인접자치구코드"], "dist": row["거리_km"]}
            )

        
        for _, row in cgg_station_map_df.iterrows():
            conn.execute(
                text("INSERT INTO STATION (station_name, latitude, longitude, district_code, station_name_eng) VALUES (:station_name,:lat, :lon, :cgg_code, :eng_name)"),
                {"station_name": row["STATION_NM"], "cgg_code": row["자치구코드"],"lat": row["위도"], "lon": row["경도"],"eng_name": row["STATION_NM_ENG"]}
            )
        
        for _, row in subway_line_df.iterrows():
            
            conn.execute(
                text("INSERT INTO STATION_LINE_MAP (station_id, line_number) VALUES (:station_name, :line_num)"),
                {"station_name": row["STATION_NM"], "line_num": row["LINE_NUM"]}
            )

